%Class that represents a simple Sensor
-module(class_Sensor).

% Determines what are the mother classes of this class (if any):
-define( wooper_superclasses, [ class_Actor ] ).

% parameters taken by the constructor ('construct').
-define( wooper_construct_parameters, ActorSettings, SensorName, SensorLat, SensorLong,
		InitialValue, GenerateDataInterval ).

% Declaring all variations of WOOPER-defined standard life-cycle operations:
% (template pasted, just two replacements performed to update arities)
-define( wooper_construct_export, new/6, new_link/6,
		 synchronous_new/6, synchronous_new_link/6,
		 synchronous_timed_new/6, synchronous_timed_new_link/6,
		 remote_new/7, remote_new_link/7, remote_synchronous_new/7,
		 remote_synchronous_new_link/7, remote_synchronisable_new_link/7,
		 remote_synchronous_timed_new/7, remote_synchronous_timed_new_link/7,
		 construct/7, destruct/1 ).

% Method declarations.
-define( wooper_method_export, actSpontaneous/1, onFirstDiasca/2).


% Allows to define WOOPER base variables and methods for that class:
-include("smart_city_test_types.hrl").

% Allows to define WOOPER base variables and methods for that class:
-include("wooper.hrl").


% Must be included before class_TraceEmitter header:
-define(TraceEmitterCategorization,"Smart-City.Sensor").


% Allows to use macros for trace sending:
-include("class_TraceEmitter.hrl").


% Creates a new soda vending machine.
%
-spec construct( wooper:state(), class_Actor:actor_settings(),
				class_Actor:name(), sensor_lat(), sensor_long(), sensor_value(), sensor_data_interval()) -> wooper:state().
construct( State, ?wooper_construct_parameters ) ->

	ActorState = class_Actor:construct( State, ActorSettings, SensorName ),

	%?send_info_fmt( ActorState,
	%	"Creating a new sensor, position [~B,~B], "
	%	"and it initial value is ~B.",
	%	[ SensorLat, SensorLong, InitialValue ] ),

	% Depending on the choice of the result manager, it will be either a PID (if
	% the corresponding result is wanted) or a 'non_wanted_probe' atom:
	StockProbePid = class_Actor:declare_probe(
		_Name=io_lib:format( "~s Sensor Value Probe", [ SensorName ] ),
		_Curves=[ io_lib:format( "~s can stock", [ SensorName ] ) ],
		_Zones=[],
		_Title="Monitoring the values generated by the sensor",
		_XLabel="Simulation tick",
		_YLabel="Values generated by the sensor" ),

	setAttributes( ActorState, [	
		{ sensor_name, SensorName },
		{ sensor_lat, SensorLat },
		{ sensor_long, SensorLong },
		{ sensor_value, InitialValue },
		{ sensor_data_interval, GenerateDataInterval },
		{ probe_pid, StockProbePid },
		{ trace_categorization,
		 text_utils:string_to_binary( ?TraceEmitterCategorization ) }
							] ).

% Overridden destructor.
%
-spec destruct( wooper:state() ) -> wooper:state().
destruct( State ) ->

	% Class-specific actions:
	%?info_fmt( "Deleting sensor, position [~B,~B], "
	%	, [ ?getAttr(sensor_lat), ?getAttr(sensor_long) ] ),

	% Then allow chaining:
	State.

% The core of the customer behaviour.
%
% (oneway)
%
-spec actSpontaneous( wooper:state() ) -> oneway_return().
actSpontaneous( State ) ->

	% Manages automatically the fact that the creation of this probe may have
	% been rejected by the result manager:

	Value = 10
		+ class_RandomManager:get_positive_integer_gaussian_value(
			_Mu=30, _Sigma=5.0 ),
	NewState = setAttribute( State, sensor_value, Value ),

	Filename = text_utils:format(
				 "/home/eduardo/Software/apache-tomcat-8.0.26/webapps/ROOT/~s.xml",
				 [ getAttribute( NewState, sensor_name ) ] ),

	Lat = getAttribute( NewState, sensor_lat ),

	Long = getAttribute( NewState, sensor_long ),

	InitFile = file_utils:open( Filename, _Opts=[ write, delayed_write ] ),

	file_utils:write( InitFile, "<locations>", [] ),	
	file_utils:write( InitFile, "<value> ~w </value>", [ Value  ] ),
	file_utils:write( InitFile, "<lat> ~w </lat>", [ Lat  ] ),
	file_utils:write( InitFile, "<long> ~w </long>", [ Long  ] ),
	file_utils:write( InitFile, "</locations>", [] ),
		
	file_utils:close( InitFile ),

	class_Probe:send_data( ?getAttr(probe_pid),
		 class_Actor:get_current_tick( NewState ),
		 { getAttribute( NewState, sensor_value ) } ),

	
	executeOneway( State, scheduleNextSpontaneousTick ).



% Simply schedules this just created actor at the next tick (diasca 0).
%
% (actor oneway)
%
-spec onFirstDiasca( wooper:state(), pid() ) -> oneway_return().
onFirstDiasca( State, _SendingActorPid ) ->

	SimulationInitialTick = ?getAttr(initial_tick),

	% Checking:
	true = ( SimulationInitialTick =/= undefined ),

	case ?getAttr(probe_pid) of

		non_wanted_probe ->
			ok;

		ProbePid ->
			ProbePid ! { setTickOffset, SimulationInitialTick }

	end,

	ScheduledState = executeOneway( State, scheduleNextSpontaneousTick ),

	?wooper_return_state_only( ScheduledState ).

