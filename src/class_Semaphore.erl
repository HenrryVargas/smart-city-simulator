%Class that represents a simple Sensor
-module(class_Semaphore).

% Determines what are the mother classes of this class (if any):
-define( wooper_superclasses, [ class_Actor ] ).

% parameters taken by the constructor ('construct').
-define( wooper_construct_parameters, ActorSettings, SemaphoreName , Lat1 , Long1 , Lat2 , Long2 ).

% Declaring all variations of WOOPER-defined standard life-cycle operations:
% (template pasted, just two replacements performed to update arities)
-define( wooper_construct_export, new/6, new_link/6,
		 synchronous_new/6, synchronous_new_link/6,
		 synchronous_timed_new/6, synchronous_timed_new_link/6,
		 remote_new/7, remote_new_link/7, remote_synchronous_new/7,
		 remote_synchronous_new_link/7, remote_synchronisable_new_link/7,
		 remote_synchronous_timed_new/7, remote_synchronous_timed_new_link/7,
		 construct/7, destruct/1 ).

% Method declarations.
-define( wooper_method_export, actSpontaneous/1, onFirstDiasca/2, get_signal/3).


% Allows to define WOOPER base variables and methods for that class:
-include("smart_city_test_types.hrl").

% Allows to define WOOPER base variables and methods for that class:
-include("wooper.hrl").


% Must be included before class_TraceEmitter header:
-define(TraceEmitterCategorization,"Smart-City.Sensor").


% Allows to use macros for trace sending:
-include("class_TraceEmitter.hrl").


% Creates a new soda vending machine.
%
-spec construct( wooper:state(), class_Actor:actor_settings(),
				class_Actor:name(), lat(), long(), lat(), long() ) -> wooper:state().
construct( State, ?wooper_construct_parameters ) ->

	ActorState = class_Actor:construct( State, ActorSettings, SemaphoreName ),

	%?send_info_fmt( ActorState,
	%	"Creating a new sensor, position [~B,~B], "
	%	"and it initial value is ~B.",
	%	[ SensorLat, SensorLong, InitialValue ] ),

	% Depending on the choice of the result manager, it will be either a PID (if
	% the corresponding result is wanted) or a 'non_wanted_probe' atom:

	StockProbePid = class_Actor:declare_probe(
		_Name=io_lib:format( "~s Semaphore Value Probe", [ SemaphoreName ] ),
		_Curves=[ io_lib:format( "~s can stock", [ SemaphoreName ] ) ],
		_Zones=[],
		_Title="Monitoring the values generated by the sensor",
		_XLabel="Simulation tick",
		_YLabel="Values generated by the semaphore" ),

	setAttributes( ActorState, [	
		{ semaphore_name, SemaphoreName },
		{ car_number, 0 },
		{ lat1, Lat1 },
		{ long1, Long1 },
		{ lat2, Lat2 },
		{ long2, Long2 },
		{ state1, green},
		{ state2, red},
		{ probe_pid, StockProbePid },
		{ next_change_tick, 1},
		{ trace_categorization,
		 text_utils:string_to_binary( ?TraceEmitterCategorization ) }
							] ).

% Overridden destructor.
%
-spec destruct( wooper:state() ) -> wooper:state().
destruct( State ) ->

	% Class-specific actions:
	%?info_fmt( "Deleting sensor, position [~B,~B], "
	%	, [ ?getAttr(sensor_lat), ?getAttr(sensor_long) ] ),

	% Then allow chaining:
	State.

-spec actSpontaneous( wooper:state() ) -> oneway_return().
actSpontaneous( State ) ->

	case is_to_change_state( State ) of

		true ->

			NewState = change_state( State ),
	
			?wooper_return_state_only( NewState );
		false -> 
			executeOneway( State, scheduleNextSpontaneousTick )
		
	end.


-spec change_state( wooper:state() ) -> oneway_return().
change_state( State ) ->

	case ?getAttr(state1) of

		green->

			NState = setAttribute( State, state1, red ),

			NewState = setAttribute( NState, state2, green ),
			
			Filename = text_utils:format(
				 "/home/eduardo/sc-monitor/locations/semaphores/~s.xml",
				 [ getAttribute( NewState, semaphore_name ) ] ),

			Lat1  = getAttribute( NewState, lat1 ),
			Long1 = getAttribute( NewState, long1 ),
			Lat2  = getAttribute( NewState, lat2 ),
			Long2 = getAttribute( NewState, long2 ),

			InitFile = file_utils:open( Filename, _Opts=[ write, delayed_write ] ),

			file_utils:write( InitFile, "<locations>", [] ),	
			file_utils:write( InitFile, "<state1>~w</state1>", [ getAttribute( NewState, state1 )  ] ),
			file_utils:write( InitFile, "<state2>~w</state2>", [ getAttribute( NewState, state2 )  ] ),
			file_utils:write( InitFile, "<lat1> ~w </lat1>", [ Lat1  ] ),
			file_utils:write( InitFile, "<long1> ~w </long1>", [ Long1  ] ),
			file_utils:write( InitFile, "<lat2> ~w </lat2>", [ Lat2  ] ),
			file_utils:write( InitFile, "<long2> ~w </long2>", [ Long2  ] ),
			file_utils:write( InitFile, "</locations>", [] ),
				
			file_utils:close( InitFile ),

			Change = 80,

			CurrentTick = class_Actor:get_current_tick( NewState ),

			TickDuration = class_Actor:convert_seconds_to_non_null_ticks(
					 Change, _MaxRelativeErrorForTest=0.50, NewState ),

			TickState = setAttribute( NewState, next_change_tick,
								 CurrentTick + TickDuration ),	

			executeOneway( TickState, scheduleNextSpontaneousTick );

		red ->


			NState = setAttribute( State, state1, green ),
			NewState = setAttribute( NState, state2, red ),

			Filename = text_utils:format(
				 "/home/eduardo/sc-monitor/locations/semaphores/~s.xml",
				 [ getAttribute( NewState, semaphore_name ) ] ),

			Lat1  = getAttribute( NewState, lat1 ),
			Long1 = getAttribute( NewState, long1 ),
			Lat2  = getAttribute( NewState, lat2 ),
			Long2 = getAttribute( NewState, long2 ),

			InitFile = file_utils:open( Filename, _Opts=[ write, delayed_write ] ),

			file_utils:write( InitFile, "<locations>", [] ),	
			file_utils:write( InitFile, "<state1>~w</state1>", [ getAttribute( NewState, state1 )  ] ),
			file_utils:write( InitFile, "<state2>~w</state2>", [ getAttribute( NewState, state2 )  ] ),
			file_utils:write( InitFile, "<lat1> ~w </lat1>", [ Lat1  ] ),
			file_utils:write( InitFile, "<long1> ~w </long1>", [ Long1  ] ),
			file_utils:write( InitFile, "<lat2> ~w </lat2>", [ Lat2  ] ),
			file_utils:write( InitFile, "<long2> ~w </long2>", [ Long2  ] ),
			file_utils:write( InitFile, "</locations>", [] ),
				
			file_utils:close( InitFile ),

			Change = 80,

			CurrentTick = class_Actor:get_current_tick( NewState ),

			TickDuration = class_Actor:convert_seconds_to_non_null_ticks(
							 Change, _MaxRelativeErrorForTest=0.50, NewState ),

			TickState = setAttribute( NewState, next_change_tick,
										 CurrentTick + TickDuration ),	

			executeOneway( TickState, scheduleNextSpontaneousTick )

	end.




-spec is_to_change_state( wooper:state() ) -> boolean().
is_to_change_state( State ) ->

	CurrentTick = class_Actor:get_current_tick( State ),

	case ?getAttr(next_change_tick) of

		MoveTick when CurrentTick >= MoveTick ->
			true;

		_ ->
			false

	end.
	
% Simply schedules this just created actor at the next tick (diasca 0).
%
% (actor oneway)
%
-spec onFirstDiasca( wooper:state(), pid() ) -> oneway_return().
onFirstDiasca( State, _SendingActorPid ) ->

	SimulationInitialTick = ?getAttr(initial_tick),

	% Checking:
	true = ( SimulationInitialTick =/= undefined ),

	case ?getAttr(probe_pid) of

		non_wanted_probe ->
			ok;

		ProbePid ->
			ProbePid ! { setTickOffset, SimulationInitialTick }

	end,

	ScheduledState = executeOneway( State, scheduleNextSpontaneousTick ),

	?wooper_return_state_only( ScheduledState ).



-spec get_signal( wooper:state(), value(), pid() ) -> oneway_return().
get_signal( State , Values , CarPID ) ->			
	
	Signal_State = element( 1 , Values),

	case Signal_State of

		1 ->
			
			case ?getAttr(state1) of

				green->

					Number = getAttribute( State , car_number ) + 1,
					NewState = setAttribute( State , car_number , Number ),

					class_Probe:send_data( ?getAttr(probe_pid),
			 		 	class_Actor:get_current_tick( NewState ),
				 		{ getAttribute( NewState , car_number ) } ),

				 	class_Actor:send_actor_message( CarPID,
						{ signal_answer, { ?getAttr(state1) , Values } }, NewState );

				_ ->

					class_Actor:send_actor_message( CarPID,
						{ signal_answer, { ?getAttr(state1) , Values } }, State )


			end;

		2 ->
			
			case ?getAttr(state2) of

				green->

					Number = getAttribute( State , car_number ) + 1,
					NewState = setAttribute( State , car_number , Number ),

					class_Probe:send_data( ?getAttr(probe_pid),
			 		 class_Actor:get_current_tick( NewState ),
				 	{ getAttribute( NewState , car_number ) } ),

					class_Actor:send_actor_message( CarPID,
						{ signal_answer, { ?getAttr(state2) , Values } }, NewState );

				_ ->

					class_Actor:send_actor_message( CarPID,
						{ signal_answer, { ?getAttr(state2) , Values } }, State )

			end
	end.
	
	
